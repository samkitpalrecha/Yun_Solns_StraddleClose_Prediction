# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fHs7goqEutuKYwD6Z8quSXpdM6w64qjE
"""

import requests
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score


"""# Function For Getting Expiry Dates for Indices"""


def get_expiry_dates(indices):

   # create a dictionary to store expiry dates of corresponding indices
   expiry_dates = {}

   for index in indices:

      # Define the API endpoint
      api_url = f"https://watch.markethound.in/api/history/expiries?index={index}"

      # Send GET request to the API
      response = requests.get(api_url)

      # Check for successful response
      if response.status_code == 200:
        # Parse the JSON response
        data = response.json()

        # Access the expiry dates
        expiry_dates[index] = data["result"]

      else:
        print(f"Error: API request failed for {index} with status code {response.status_code}")

   return expiry_dates


"""# Function For Getting Expiry Data for a Particular Index"""


def get_expiry_data(index, expiry_dates, dte_start, dte_end):

   expiry_data_dte = {}

   for dte in range(dte_start, dte_end+1):
       expiry_data_dte[dte] = []
       for expiry in expiry_dates[index]:
           api_url = f'https://watch.markethound.in/api/history/decay?name={index}&expiry={expiry}&dte={dte}'

           # Send GET request to the API
           response = requests.get(api_url)

           # Check for successful response
           if response.status_code == 200:

             # Parse the JSON response
             data = response.json()
             result = data['result']

             if len(result) > 0:
                result = result[0]
                result[f'open_dte{dte}'] = result.pop('open')
                result.pop('high')
                result.pop('low')
                result[f'close_dte{dte}'] = result.pop('close')
                result.pop('index_open')
                result.pop('index_high')
                result.pop('index_low')
                result.pop('index_close')
                result.pop('intradayMovement')
                result.pop('intradayTotal')
                result[f'dte{dte}'] = result.pop('date')
                expiry_data_dte[dte].append(result)
           else:
             print(f"Error: API request failed for {index} with status code {response.status_code}")

   return expiry_data_dte


"""# Function for Creating a Dataframe out of the Retrieved Data"""


# Create the DataFrame using list comprehension and pd.concat
def create_df(data):
    df = pd.concat([pd.DataFrame(d) for d in data.values()], axis=1)
    df = df.drop(columns=['_id','daysToExpiry', 'expiry', 'index', 'overnightExpected', 'overnightGap'])
    df = df.dropna()
    return df


"""# Function for Getting IndiaVix Data"""


def get_vix_data(): 
    india_vix = pd.read_csv('INDIAVIX.csv')
    india_vix_ = india_vix.iloc[::-1]
    india_vix_.reset_index(drop=True, inplace=True)
    india_vix_ = india_vix_.drop(columns=['5', '6'])
    return india_vix_


"""# Function for Getting Vix Values for our DataFrame"""


# Enumerate through rows of 'df'
def get_vix_values(df, india_vix_, dte_start, dte_end):
    for index, row in df.iterrows():
      date_dict = {}
      for dte in range(dte_start, dte_end+1):
          date_name = f'dte{dte}'
          date_dict[date_name] = row[date_name][:-5]

      # Loop through dates in 'india_vix_'
      for date_name in date_dict.keys():
        for india_vix_index, india_vix_date in india_vix_['0'].items():
          if date_dict[date_name] == india_vix_date[:-5]:
             # Assign 'open' value to 'vix{dte}'
             df.loc[index, f'vix_{date_name}'] = india_vix_['1'][india_vix_index]
             break

    for dte in range(dte_start, dte_end+1):
        df = df.drop(columns=[f'dte{dte}'])

    df.dropna(inplace=True)
    df.reset_index(drop=True, inplace=True)

    return df

# define a list of indices
indices = ['NIFTY', 'FINNIFTY', 'SENSEX', 'BANKNIFTY', 'MIDCPNIFTY', 'BANKEX']

# get all expiry dates of all indices
expiry_dates = get_expiry_dates(indices)

india_vix_ = get_vix_data()

dte_start = 1
dte_end = 5

for index in indices:
    data = get_expiry_data(index, expiry_dates, dte_start, dte_end)

    df = create_df(data)

    df = get_vix_values(df, india_vix_, dte_start, dte_end)

    df_ = df.drop(index=16)

    df_.reset_index(drop=True, inplace=True)

    df_.to_csv(f"Data/{index}.csv")
